/** Declaration file generated by dts-gen */
declare module 'drizzle-react' {
  class DrizzleProvider {
    constructor(...args: any[]);

    getChildContext(...args: any[]): void;

    render(...args: any[]): void;
  }

  function drizzleConnect(t: any, e: any): any;

  namespace DrizzleContext {
    class Provider {
      constructor(...args: any[]);

      componentDidMount(...args: any[]): void;

      componentWillUnmount(...args: any[]): void;

      render(...args: any[]): void;
    }

    const Consumer: {
      $$typeof: any;
      Consumer: any;
      Provider: {
        $$typeof: any;
      };
    };

    const Context: {
      $$typeof: any;
      Consumer: {
        $$typeof: any;
        Consumer: any;
        Provider: {
          $$typeof: any;
        };
      };
      Provider: {
        $$typeof: any;
      };
    };

    namespace Provider {
      namespace prototype {
        const isMounted: any;

        const isReactComponent: {};

        const replaceState: any;

        function componentDidMount(...args: any[]): void;

        function componentWillUnmount(...args: any[]): void;

        function forceUpdate(callback: any): void;

        function render(...args: any[]): void;

        function setState(partialState: any, callback: any): void;

        namespace forceUpdate {
          // Too-deep object hierarchy from drizzle_react.DrizzleContext.Provider.prototype.forceUpdate
          const prototype: any;
        }

        namespace setState {
          // Too-deep object hierarchy from drizzle_react.DrizzleContext.Provider.prototype.setState
          const prototype: any;
        }
      }
    }
  }

  namespace DrizzleProvider {
    namespace childContextTypes {
      function drizzle(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      function drizzleStore(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;
    }

    namespace propTypes {
      function options(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      function store(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

      namespace store {
        function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;
      }
    }

    namespace prototype {
      const isMounted: any;

      const isReactComponent: {};

      const replaceState: any;

      function forceUpdate(callback: any): void;

      function getChildContext(...args: any[]): void;

      function render(...args: any[]): void;

      function setState(partialState: any, callback: any): void;

      namespace forceUpdate {
        const prototype: {};
      }

      namespace setState {
        const prototype: {};
      }
    }
  }

  namespace drizzleConnect {
    const prototype: {};
  }

  namespace drizzleReactHooks {
    function DrizzleProvider({ children: t, drizzle: e }: any): any;

    function Initializer({ children: t, error: e, loadingContractsAndAccounts: n, loadingWeb3: r }: any): any;

    function useDrizzle(): {
      cacheCall;
      drizzle;
      useCacheCall;
      useCacheEvents;
      useCacheSend;
    };

    function useDrizzleState(t: any, e?: any): any;

    namespace DrizzleProvider {
      namespace propTypes {
        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function drizzle(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;
      }
    }

    namespace Initializer {
      const defaultProps: {
        error: string;
        loadingContractsAndAccounts: string;
        loadingWeb3: string;
      };

      namespace propTypes {
        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function error(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function loadingContractsAndAccounts(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function loadingWeb3(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace error {
          // Too-deep object hierarchy from drizzle_react.drizzleReactHooks.Initializer.propTypes.error
          const isRequired: any;
        }

        namespace loadingContractsAndAccounts {
          // Too-deep object hierarchy from drizzle_react.drizzleReactHooks.Initializer.propTypes.loadingContractsAndAccounts
          const isRequired: any;
        }

        namespace loadingWeb3 {
          // Too-deep object hierarchy from drizzle_react.drizzleReactHooks.Initializer.propTypes.loadingWeb3
          const isRequired: any;
        }
      }
    }
  }
}
